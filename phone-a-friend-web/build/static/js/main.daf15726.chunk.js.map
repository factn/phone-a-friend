{"version":3,"sources":["fonts/Poppins/Poppins-Regular.ttf","utils/GlobalStyle.js","contexts/CtxBuilder.tsx","config/environment.ts","contexts/AppContext.tsx","config/firebase.ts","components/mobileauth/MobileAuthPopup.tsx","pages/LoginPage/LoginPage.tsx","components/routes/ProtectedRoute.tsx","components/splashscreen/CallOrReceive.tsx","components/splashscreen/MainJumbo.tsx","components/splashscreen/MainSplash.tsx","utils/Colors.tsx","components/Nav.tsx","components/Header.tsx","components/intro/Intro.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","GlobalStyle","createGlobalStyle","Poppins","createCtx","reducer","initialState","ctx","React","createContext","state","dispatch","props","useReducer","Provider","value","getAsString","varName","envVar","process","undefined","Error","buildErrMessage","envConfig","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","environment","isLocalDevelopment","action","console","log","newState","type","user","globalReducer","AppContext","AppProvider","useStateValue","useContext","firebase","config","uiConfig","signInFlow","callbacks","signInSuccessWithAuthResult","authResult","signInOptions","auth","PhoneAuthProvider","PROVIDER_ID","PopupBackground","styled","div","MobileAuthPopup","open","onClose","ReactDOM","createPortal","onClick","e","stopPropagation","firebaseAuth","document","body","LoginPage","useState","authVisible","setAuthVisible","history","useHistory","useEffect","unlistenToAuth","onAuthStateChanged","authUser","uid","push","style","display","flexDirection","ProtectedRoute","children","rest","render","location","from","to","pathname","MainDiv","color","Button","CallOrReceive","btnCopy","click","role","nav","P","MainJumbo","MainSplash","makeCall","receiveCall","NavContainer","NavDiv","Nav","Headline","h1","Header","main","p","Blurb","Div50","DivL","DivR","Intro","copy","getStarted","ProtectedRouteTest","App","setRole","path","default","Boolean","window","hostname","match","MainContainer","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.daf15726.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Poppins-Regular.41e8dead.ttf\";","import {\n    createGlobalStyle\n} from 'styled-components';\nimport Poppins from '../fonts/Poppins/Poppins-Regular.ttf'\n\nconst GlobalStyle = createGlobalStyle `\n@font-face {\n    font-family: 'Poppins';\n    src: url(${Poppins}) format('truetype');\n    font-weight: 300;\n    font-style: normal;\n    font-display: auto;\n  }\n\n    html {\n        font-family: 'Poppins';\n        font-size: 17px;\n    }\n\n    @media (max-width: 900px) {\n     html { font-size: 15px; }\n    }\n    \n    @media (max-width: 400px) {\n     html { font-size: 13px; }\n    }\n\n\n  p {\n      font-size: 1em;\n  }\n\n`;\n\nexport default GlobalStyle;","/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport React from \"react\";\n\nfunction createCtx<StateType, ActionType>(\n  reducer: React.Reducer<StateType, ActionType>,\n  initialState: StateType\n) {\n  const defaultDispatch: React.Dispatch<ActionType> = () => initialState; // we never actually use this\n  const ctx = React.createContext({\n    state: initialState,\n    dispatch: defaultDispatch // just to mock out the dispatch type and make it not optioanl\n  });\n  function Provider(props: React.PropsWithChildren<{}>): JSX.Element {\n    const [state, dispatch] = React.useReducer<\n      React.Reducer<StateType, ActionType>\n    >(reducer, initialState);\n    return <ctx.Provider value={{ state, dispatch }} {...props} />;\n  }\n  return [ctx, Provider] as const;\n}\n\nexport default createCtx;\n","function buildErrMessage(varName: string): string {\n  const file =\n    process.env.NODE_ENV === \"development\" ? \".env\" : \".env.production\";\n  return `Error parsing environmental config from ${file}\n  Unable to get value for variable name: ${varName}\n  Once this is fixed you will need to re-build/restart the server`;\n}\n\nfunction getAsString(varName: string): string {\n  const envVar: string | undefined = process.env[\"REACT_APP_\" + varName];\n  if (envVar !== undefined && envVar !== null) {\n    return envVar;\n  } else {\n    throw new Error(buildErrMessage(varName));\n  }\n}\n\nconst envConfig = {\n  firebaseConfig: {\n    apiKey: getAsString(\"FIREBASE_API_KEY\"),\n    authDomain: getAsString(\"FIREBASE_AUTH_DOMAIN\"),\n    databaseURL: getAsString(\"FIREBASE_DB_URL\"),\n    projectId: getAsString(\"FIREBASE_PROJECT_ID\"),\n    storageBucket: getAsString(\"FIREBASE_STORAGE_BUCKET\"),\n    messagingSenderId: getAsString(\"FIREBASE_MESSAGE_SENDER_ID\"),\n    appId: getAsString(\"FIREBASE_APP_ID\"),\n    measurementId: getAsString(\"FIREBASE_MEASUREMENT_ID\")\n  },\n  environment: getAsString(\"ENVIRONMENT\"),\n  isLocalDevelopment: process.env.NODE_ENV === \"development\"\n};\n\nexport default envConfig;\n","import React from \"react\";\nimport createCtx from \"./CtxBuilder\";\nimport envConfig from \"../config/environment\";\n\nconst initialState = {\n  user: \"\"\n};\n\ntype AppState = typeof initialState;\n\ntype Action = { type: \"USER_LOGIN\"; user: string };\n\n/**\n * Redux style reducer for the whole app\n * It takes the current state and an action, and returns the new state\n * @param state\n * @param action\n */\nfunction globalReducer(state: AppState, action: Action): AppState {\n  switch (action.type) {\n    case \"USER_LOGIN\":\n      return { ...state, user: action.user };\n    default:\n      return state;\n  }\n}\n\n/**\n * This is just a wrapper around the global reducer for logging purposes during development\n * @param state\n * @param action\n */\nfunction globalReducerWithLogging(state: AppState, action: Action): AppState {\n  if (envConfig.isLocalDevelopment) {\n    console.log(\"BEFORE: \", state);\n    console.log(\"ACTION: \", action);\n  }\n  const newState = globalReducer(state, action);\n  if (envConfig.isLocalDevelopment) console.log(\"AFTER: \", newState);\n  return newState;\n}\n\ntype UseStateValue = {\n  state: AppState;\n  dispatch: React.Dispatch<Action>;\n};\n\nexport const [AppContext, AppProvider] = createCtx(\n  globalReducerWithLogging,\n  initialState\n);\nexport const useStateValue: () => UseStateValue = () =>\n  React.useContext(AppContext);\n","import * as firebase from \"firebase\";\nimport config from \"./environment\";\n\n// Initialize Firebase and Firebase Analytics\nconst app = firebase.initializeApp(config.firebaseConfig);\nconst analytics = firebase.analytics();\n\nexport const firebaseApp = app;\nexport const firebaseAnalytics = analytics;\nexport default firebase;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport * as firebaseui from \"firebaseui\";\nimport styled from \"styled-components\";\nimport firebase from \"../../config/firebase\";\n\nexport type AuthResult = {\n  additionalUserInfo: {\n    providerId: string; // \"phone\"\n    isNewUser: boolean;\n  };\n  credential: any | undefined;\n  operationType: string; // \"signIn\"\n  user: {\n    displayName?: string;\n    phoneNumber?: string;\n    uid: string;\n  };\n};\n\nconst uiConfig: firebaseui.auth.Config = {\n  signInFlow: \"popup\", // Popup vs redirect\n  callbacks: {\n    signInSuccessWithAuthResult: (authResult: AuthResult) => false\n  },\n  signInOptions: [firebase.auth.PhoneAuthProvider.PROVIDER_ID]\n};\n\nconst PopupBackground = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  width: 100vw;\n  right: 100vh;\n  background-color: rgba(85, 85, 85, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\ntype MobileAuthPopupProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nconst MobileAuthPopup: React.FC<MobileAuthPopupProps> = ({ open, onClose }) => {\n  return ReactDOM.createPortal(\n    open && (\n      <PopupBackground onClick={onClose}>\n        <div onClick={e => e.stopPropagation()}>\n          <StyledFirebaseAuth\n            uiConfig={uiConfig}\n            firebaseAuth={firebase.auth()}\n          />\n        </div>\n      </PopupBackground>\n    ),\n    document.body\n  );\n};\n\nexport default MobileAuthPopup;\n","import React, { useEffect, useState } from \"react\";\nimport firebase from \"firebase\";\nimport { useStateValue } from \"../../contexts/AppContext\";\nimport MobileAuthPopup from \"../../components/mobileauth/MobileAuthPopup\";\nimport { useHistory } from \"react-router-dom\";\n\nconst LoginPage = () => {\n  const [authVisible, setAuthVisible] = useState<boolean>(true);\n  const { dispatch } = useStateValue();\n  const history = useHistory();\n\n  useEffect(() => {\n    const unlistenToAuth = firebase.auth().onAuthStateChanged(authUser => {\n      if (authUser) {\n        dispatch({ type: \"USER_LOGIN\", user: authUser.uid });\n        history.push(\"/loggedIn\");\n      } else {\n        dispatch({ type: \"USER_LOGIN\", user: \"\" });\n      }\n    });\n    return () => {\n      unlistenToAuth();\n    };\n  }, []);\n\n  const openAuth = () => setAuthVisible(true);\n  const closeAuth = () => setAuthVisible(false);\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      Log in\n      <button onClick={openAuth}>Log In</button>\n      <MobileAuthPopup open={authVisible} onClose={closeAuth} />\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import React, { PropsWithChildren } from \"react\";\nimport { Redirect, Route, RouteProps } from \"react-router-dom\";\nimport { useStateValue } from \"../../contexts/AppContext\";\n\n/**\n * This component wraps all protected routes\n * It checks if the user is logged in:\n * - User logged in -> Render the route they were going to\n * - User NOT logged in -> Redirect to login page\n */\nconst ProtectedRoute: React.FC<PropsWithChildren<RouteProps>> = ({\n  children,\n  ...rest\n}) => {\n  const { state } = useStateValue();\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        state.user !== \"\" ? (\n          <>{children}</>\n        ) : (\n          <Redirect\n            from=\"\"\n            to={{ pathname: \"/login\", state: { from: location } }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default ProtectedRoute;\n","import React from \"react\";\nimport { FaPhone } from \"react-icons/fa\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\ntype Props = {\n  btnCopy: string;\n  color: string;\n  click: () => void;\n};\n\nconst MainDiv = styled.div`\n  width: 50%;\n  padding: 30px 0 30px 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background: ${props => props.color};\n`;\n\nconst Button = styled.div`\n  border: 2px solid black;\n  font-size: 0.8rem;\n  padding: 6px;\n  width: 142px;\n  height: 11px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n`;\n\nconst CallOrReceive: React.FunctionComponent<Props> = ({\n  color,\n  btnCopy,\n  click\n}) => (\n  <MainDiv color={color}>\n    <h1>I want to</h1>\n    <div>\n      <FaPhone />\n    </div>\n    <Link to=\"/login\">\n      <Button role=\"button\" onClick={() => click()}>\n        {btnCopy}\n      </Button>\n    </Link>\n  </MainDiv>\n);\n\nexport default CallOrReceive;\n","import React from 'react'\nimport styled from 'styled-components';\n\n\nconst MainDiv = styled.nav`\n    width: 80%;\n    overflow:hidden;\n    margin: 0 auto 0 auto 0;\n`;\nconst P = styled.div`\n    margin:0;\n    font-size: .8rem;\n`;\n\nconst MainJumbo = () => {\n    return (\n        <MainDiv>\n            <h1>Hi! Let's Connect</h1>\n            <P>Lorem ipsum dolor sit amet consectetur adipisicing elit. Aliquam vitae repellendus minima, ipsum, ipsa pariatur autem, totam mollitia necessitatibus\n                 libero corrupti facilis. Tempora eveniet, quasi quod incidunt officia labore. Harum!</P>\n        </MainDiv>\n    )\n}\n\nexport default MainJumbo\n","import React from 'react'\nimport styled from 'styled-components';\nimport CallOrReceive from './CallOrReceive'\nimport MainJumbo from './MainJumbo'\nimport { PEACH } from '../../utils/Colors';\nimport { LAVENDER } from '../../utils/Colors'\n\n\nconst MainDiv = styled.nav`\n    width: 750px;\n    height: 265px;\n    overflow:hidden;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`;\n\ntype Props = {\n    makeCall: () => void;\n    receiveCall: () => void;\n}\n\nconst MainSplash: React.FunctionComponent<Props> = ({ makeCall, receiveCall }) => (\n    <>\n        <MainDiv>\n            <CallOrReceive\n                click={makeCall}\n                color={PEACH}\n                btnCopy=\"Phone a Friend\" />\n            <CallOrReceive\n                click={receiveCall}\n                color={LAVENDER}\n                btnCopy=\"Take a Call\" />\n        </MainDiv>\n        <MainJumbo />\n    </>\n)\n\n\nexport default MainSplash\n","export const PEACH='#f8b99f';\n\nexport const LAVENDER = 'lavender';","import React from 'react';\nimport styled from 'styled-components';\n\nconst NavContainer = styled.nav`\n    display: flex;\n    flex-direction: row;\n`;\nconst NavDiv = styled.nav`\n    margin-left: 10px;\n    font-size: .8rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n`;\n\nconst Nav = () => {\n    return (\n        <NavContainer>\n            <NavDiv>Home</NavDiv>\n            <NavDiv>Phone a Friend</NavDiv>\n            <NavDiv>Take a Call</NavDiv>\n            <NavDiv>Contact Us</NavDiv>\n        </NavContainer>\n    )\n}\n\nexport default Nav\n","import React from 'react';\nimport Nav from './Nav'\nimport styled from 'styled-components';\n\nconst MainDiv = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    width: 96%;\n    height: 55px;\n    margin: 0 40px 0 40px;\n`;\n\nconst Headline = styled.h1`\n    font-size: 1rem;\n`;\n\nconst Header = () => (\n    <MainDiv>\n        <Headline>PhoneAFriend.care</Headline>\n        <Nav />\n    </MainDiv>\n)\n\nexport default Header;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst MainDiv = styled.main`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  background: ${props => props.color};\n`;\n\nconst Headline = styled.p`\n  font-size: 1.8em;\n  font-weight: 400;\n  margin: 0;\n`;\nconst Blurb = styled.p`\n  font-size: 0.8em;\n`;\nconst Button = styled.div`\n  border: 2px solid black;\n  font-size: 0.8rem;\n  padding: 6px;\n  width: 142px;\n  height: 11px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n`;\n\nconst Div50 = styled.div`\n  width: 50%;\n`;\nconst DivL = styled(Div50)`\n  margin-left: 44px;\n  margin-right: 22px;\n`;\n\nconst DivR = styled(Div50)`\n  margin-left: 22px;\n  margin-right: 44px;\n`;\n\ntype Props = {\n  color: string;\n  copy: string;\n  getStarted: () => void;\n};\n\nconst Intro: React.FunctionComponent<Props> = ({ color, copy, getStarted }) => {\n  return (\n    <MainDiv color={color}>\n      <DivL>\n        <Headline>I want to</Headline>\n        <Headline>{copy}</Headline>\n      </DivL>\n\n      <DivR>\n        <Blurb>\n          Lorem ipsum dolor sit, amet consectetur adipisicing elit. Perferendis\n          neque exercitationem doloremque nihil expedita quam non, aut dolore\n          nam nisi, reprehenderit perspiciatis? Tenetur officia error nisi\n          tempore, commodi maxime eaque?\n        </Blurb>\n        <Link to=\"/login\">\n          <Button role=\"button\" onClick={() => getStarted()}>\n            Get Started\n          </Button>\n        </Link>\n      </DivR>\n    </MainDiv>\n  );\n};\n\nexport default Intro;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory\n} from \"react-router-dom\";\n\nimport LoginPage from \"../pages/LoginPage/LoginPage\";\nimport { useStateValue } from \"../contexts/AppContext\";\n\nimport ProtectedRoute from \"./routes/ProtectedRoute\";\nimport MainSplash from \"./splashscreen/MainSplash\";\nimport styled from \"styled-components\";\nimport Header from \"./Header\";\nimport Intro from \"./intro/Intro\";\n\n// import Register from \"./register/\";\nimport { PEACH } from \"../utils/Colors\";\nimport { LAVENDER } from \"../utils/Colors\";\n\n// import SignUp from './SignUp';\n\nconst CALLER = \"caller\";\nconst CALLEE = \"callee\";\nconst NEITHER = \"neither\";\n\nconst MainDiv = styled.div`\n  width: 750px;\n  height: 463px;\n  border: 1px solid black;\n  border-radius: 10px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0 auto 0 auto;\n  box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.25);\n`;\n\nfunction App() {\n  const [role, setRole] = useState(NEITHER);\n\n  const makeCall = () => {\n    setRole(CALLER);\n  };\n\n  const receiveCall = () => {\n    setRole(CALLEE);\n  };\n\n  const handleGetStarted = () => {\n    // By using the <Link> components from react-route-dom we can navigate automatically without needing callbacks\n  };\n\n  return (\n    <MainDiv>\n      <Header />\n      <Router>\n        <Switch>\n          <Route path=\"/login\">\n            <LoginPage />\n          </Route>\n\n          <ProtectedRoute path=\"/loggedIn\">\n            <ProtectedRouteTest />\n          </ProtectedRoute>\n\n          <Route path=\"/register\">\n            <Intro\n              color={role === CALLER ? PEACH : LAVENDER}\n              copy={role === CALLER ? \"Phone a Friend\" : \"Receive a Call\"}\n              getStarted={handleGetStarted}\n            />\n          </Route>\n\n          <Route default path=\"/\">\n            <MainSplash makeCall={makeCall} receiveCall={receiveCall} />\n          </Route>\n        </Switch>\n      </Router>\n    </MainDiv>\n  );\n}\n\nconst ProtectedRouteTest: React.FC<{}> = () => (\n  <div>User must be logged in to see this</div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// import { ThemeProvider } from 'styled-components';\n\n// import 'sanitize.css';\n// import theme from './utils/theme';\nimport GlobalStyle from \"./utils/GlobalStyle\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { AppProvider } from \"./contexts/AppContext\";\n\nconst MainContainer = () => (\n  <>\n    <GlobalStyle />\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </>\n);\n\nReactDOM.render(<MainContainer />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}